import logging
from typing import List
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.models import User

logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [KeyboardButton(text="üîë –ü–∞—Ä–æ–ª–∏")],
        [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
        [KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏")],
        [KeyboardButton(text="üö´ –°—Ç–æ–ø –ª–æ–≥–∏"), KeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –ª–æ–≥–∏")],
        [KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ª–æ–≥–æ–≤")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def get_admin_inline_keyboard() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="üîë –ü–∞—Ä–æ–ª–∏", callback_data="admin_passwords"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_upload_logs")
        ],
        [
            InlineKeyboardButton(text="üö´ –°—Ç–æ–ø –ª–æ–≥–∏", callback_data="admin_stop_logs"),
            InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_allow_logs")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ª–æ–≥–æ–≤", callback_data="admin_clear_logs")
        ],
        [
            InlineKeyboardButton(text="üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_broadcast")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
def get_worker_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    keyboard = [
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üóëÔ∏è –ü—É—Å—Ç–æ–π –ª–æ–≥")],
        [KeyboardButton(text="üì• –í–∑—è—Ç—å –ª–æ–≥–∏")],
        [KeyboardButton(text="üìã –í–∞—à–∏ –ª–æ–≥–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
def get_worker_inline_keyboard() -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    keyboard = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="worker_statistics")],
        [InlineKeyboardButton(text="üóëÔ∏è –ü—É—Å—Ç–æ–π –ª–æ–≥", callback_data="worker_empty_log")],
        [InlineKeyboardButton(text="üì• –í–∑—è—Ç—å –ª–æ–≥–∏", callback_data="worker_take_logs")],
        [InlineKeyboardButton(text="üìã –í–∞—à–∏ –ª–æ–≥–∏", callback_data="worker_your_logs")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è–º–∏
def get_passwords_keyboard(passwords: List) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è–º–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    keyboard.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", callback_data="create_password")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–æ–ª–µ–π
    for password in passwords:
        remaining_uses = password.max_uses - password.used_count
        keyboard.append([
            InlineKeyboardButton(
                text=f"üîê {password.password} ({remaining_uses}/{password.max_uses})",
                callback_data=f"password_{password.id}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–º
def get_password_management_keyboard(password_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º"""
    keyboard = [
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"delete_password_{password_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–∞—Ä–æ–ª—è–º", callback_data="back_to_passwords")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def get_users_keyboard(users: List[User]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        display_name = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip() or f"User {user.user_id}"
        callback_data = f"user_{user.user_id}"
        logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} —Å callback_data: {callback_data}")
        keyboard.append([
            InlineKeyboardButton(
                text=f"{'üëë ' if user.is_admin else 'üë§ '}{display_name}",
                callback_data=callback_data
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def get_user_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    callback_data = f"delete_user_{user_id}"
    logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å callback_data: {callback_data}")
    keyboard = [
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=callback_data)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="back_to_users")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
def get_confirmation_keyboard(action: str, entity_id: int = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    callback_data_confirm = f"confirm_{action}"
    callback_data_cancel = f"cancel_{action}"
    
    if entity_id is not None:
        callback_data_confirm += f"_{entity_id}"
        callback_data_cancel += f"_{entity_id}"
    
    logger.info(f"–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å callback_data: {callback_data_confirm} –∏ {callback_data_cancel}")
    
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=callback_data_confirm),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=callback_data_cancel)
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 