import logging
from typing import List
from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from database.base import async_session
from database.repositories import UserRepository, LogRepository
from keyboards import get_worker_keyboard
from states import WorkerState
from handlers.common import get_welcome_message

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def show_statistics(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_repo = UserRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_by_user_id(message.from_user.id)
        
        if user:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            await message.answer(
                f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üì¶ –í–∑—è—Ç–æ –ª–æ–≥–æ–≤: {user.taken_logs_count}\n"
                f"üóë –ü—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤: {user.empty_logs_count}\n"
                f"üóì –ü—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user.daily_empty_logs_count}"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—É—Å—Ç–æ–π –ª–æ–≥"
async def empty_log(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—É—Å—Ç–æ–π –ª–æ–≥'"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
    await state.set_state(WorkerState.waiting_for_empty_logs_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
async def process_empty_logs_count(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        empty_logs_count = int(message.text)
        if empty_logs_count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_repo = UserRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_by_user_id(message.from_user.id)
        
        if user:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
            await user_repo.increment_empty_logs(message.from_user.id, empty_logs_count)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repo.get_by_user_id(message.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            await message.answer(
                f"{empty_logs_count} –ø—É—Å—Ç—ã—Ö –ª–æ–≥–∞\n"
                f"–ò—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {user.daily_empty_logs_count} –ø—É—Å—Ç—ã—Ö"
            )
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –ª–æ–≥–∏"
async def take_logs(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –ª–æ–≥–∏'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≤—ã–¥–∞—á–∞ –ª–æ–≥–æ–≤
    if settings.LOGS_BLOCKED:
        await message.answer("–í—ã–¥–∞—á–∞ –ª–æ–≥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        log_repo = LogRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤
        available_logs_count = await log_repo.get_available_logs_count()
        
        if available_logs_count == 0:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_logs_count}\n"
            f"–ú–∞–∫—Å–∏–º—É–º: {settings.MAX_LOGS_PER_USER}"
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
    await state.set_state(WorkerState.waiting_for_logs_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
async def process_logs_count(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        logs_count = int(message.text)
        if logs_count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ
    if logs_count > settings.MAX_LOGS_PER_USER:
        await message.answer(
            f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –±–æ–ª—å—à–µ {settings.MAX_LOGS_PER_USER} –ª–æ–≥–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        log_repo = LogRepository(session)
        user_repo = UserRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤
        available_logs_count = await log_repo.get_available_logs_count()
        
        if available_logs_count == 0:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–æ–≤.")
            await state.clear()
            return
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if logs_count > available_logs_count:
            logs_count = available_logs_count
            await message.answer(
                f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_logs_count} –ª–æ–≥–æ–≤. "
                f"–í—ã–¥–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏."
            )
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logs = await log_repo.assign_logs_to_user(message.from_user.id, logs_count)
        
        if logs:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∑—è—Ç—ã—Ö –ª–æ–≥–æ–≤
            await user_repo.increment_taken_logs(message.from_user.id, len(logs))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤
            await message.answer(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {len(logs)} –ª–æ–≥–æ–≤.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for log in logs:
                try:
                    await bot.send_document(
                        chat_id=message.chat.id,
                        document=log.file_id,
                        caption=f"–õ–æ–≥: {log.file_name}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ {log.id}: {e}")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∞—à–∏ –ª–æ–≥–∏"
async def show_user_logs(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∞—à–∏ –ª–æ–≥–∏'"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        log_repo = LogRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logs = await log_repo.get_user_logs(message.from_user.id)
        
        if logs:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–æ–≥–æ–≤
            await message.answer(f"–£ –≤–∞—Å –µ—Å—Ç—å {len(logs)} –ª–æ–≥–æ–≤:")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for log in logs:
                try:
                    await bot.send_document(
                        chat_id=message.chat.id,
                        document=log.file_id,
                        caption=f"–õ–æ–≥: {log.file_name}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ {log.id}: {e}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ª–æ–≥–æ–≤.")

def register_worker_handlers(dp: Dispatcher, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.message.register(show_statistics, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(empty_log, F.text == "üóëÔ∏è –ü—É—Å—Ç–æ–π –ª–æ–≥")
    dp.message.register(take_logs, F.text == "üì• –í–∑—è—Ç—å –ª–æ–≥–∏")
    dp.message.register(show_user_logs, F.text == "üìã –í–∞—à–∏ –ª–æ–≥–∏")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_empty_logs_count, WorkerState.waiting_for_empty_logs_count)
    dp.message.register(process_logs_count, WorkerState.waiting_for_logs_count) 