import logging
import os
from datetime import datetime
from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from database.base import async_session
from database.repositories import UserRepository, LogRepository, SessionRepository
from keyboards import get_worker_inline_keyboard
from states import WorkerState
from handlers.common import get_welcome_message
from utils.archive import create_archive_with_sessions, delete_session_folders, TEMP_DIR, SESSIONS_DIR

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def show_statistics(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_repo = UserRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await user_repo.get_fresh_statistics(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        stats_message += f"–í—Å–µ–≥–æ –≤—ã –≤–∑—è–ª–∏: {stats['taken_logs_count']} —Å–µ—Å—Å–∏–π.\n"
        stats_message += f"–í—Å–µ–≥–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤: {stats['empty_logs_count']}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await message.answer(stats_message, parse_mode="Markdown")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: taken={stats['taken_logs_count']}, empty={stats['empty_logs_count']}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—É—Å—Ç–æ–π –ª–æ–≥"
async def empty_log(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—É—Å—Ç–æ–π –ª–æ–≥'"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
    await state.set_state(WorkerState.waiting_for_empty_logs_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤
async def process_empty_logs_count(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        empty_logs_count = int(message.text)
        if empty_logs_count <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª—è–µ—Ç {empty_logs_count} –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_repo = UserRepository(session)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated_user = await user_repo.update_statistics(
            user_id=user_id,
            empty_logs_to_add=empty_logs_count
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    await message.answer(
        f"–í—ã –≤–∑—è–ª–∏ {empty_logs_count} –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤.\n"
        f"–í—Å–µ–≥–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤: {updated_user.empty_logs_count}"
    )
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: empty_logs_count={updated_user.empty_logs_count}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –ª–æ–≥–∏"
async def take_logs(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –ª–æ–≥–∏'"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        session_repo = SessionRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        available_sessions_count = await session_repo.get_available_sessions_count()
        
        if available_sessions_count == 0:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è –≤—ã–¥–∞—á–∏
        await message.answer(
            f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Å—Å–∏–π: {available_sessions_count}\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–æ—Ç 1 –¥–æ {min(available_sessions_count, settings.MAX_LOGS_PER_USER)}):"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π
        await state.set_state(WorkerState.waiting_for_logs_count)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –¥–ª—è –≤—ã–¥–∞—á–∏
async def process_logs_count(message: Message, state: FSMContext, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π –¥–ª—è –≤—ã–¥–∞—á–∏"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    
    try:
        count = int(message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with async_session() as session:
            session_repo = SessionRepository(session)
            user_repo = UserRepository(session)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π
            available_sessions_count = await session_repo.get_available_sessions_count()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if count <= 0:
                await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if count > min(available_sessions_count, settings.MAX_LOGS_PER_USER):
                await message.answer(
                    f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –±–æ–ª—å—à–µ {min(available_sessions_count, settings.MAX_LOGS_PER_USER)} —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            status_message = await message.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–µ—Å—Å–∏–∏...")
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sessions = await session_repo.assign_sessions_to_user(user_id, count)
            
            if not sessions:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=status_message.message_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                await state.clear()
                return
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ—Ä–µ—Ç {count} —Å–µ—Å—Å–∏–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user = await user_repo.update_statistics(
                user_id=user_id,
                taken_logs_to_add=count
            )
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å —Å–µ—Å—Å–∏—è–º–∏
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            archive_name = f"logs_{timestamp}"
            archive_path = TEMP_DIR / archive_name
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–µ—Å—Å–∏–π
            phone_numbers = [session.phone_number for session in sessions]
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–π –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            folder_names = []
            for phone in phone_numbers:
                folder_name = f"session_{phone}"
                folder_path = SESSIONS_DIR / folder_name
                os.makedirs(folder_path, exist_ok=True)
                folder_names.append(folder_name)
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            success = await create_archive_with_sessions(folder_names, archive_path)
            
            if not success:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=status_message.message_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                await state.clear()
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=status_message.message_id,
                text=f"–ê—Ä—Ö–∏–≤ —Å {count} —Å–µ—Å—Å–∏—è–º–∏ –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è—é..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            zip_path = f"{archive_path}.zip"
            await message.answer_document(
                FSInputFile(zip_path),
                caption=f"–í–∞—à–∏ –ª–æ–≥–∏ WhatsApp ({count} —à—Ç.)"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
            try:
                if os.path.exists(zip_path):
                    os.remove(zip_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ {zip_path}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–π
            await delete_session_folders(folder_names)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –≤—ã–¥–∞—á–µ
            await message.answer(
                f"–°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã! –í—Å–µ–≥–æ –≤—ã –≤–∑—è–ª–∏: {updated_user.taken_logs_count} —Å–µ—Å—Å–∏–π."
            )
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            logger.info(f"–°–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í—Å–µ–≥–æ –≤–∑—è—Ç–æ: {updated_user.taken_logs_count}")
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–∞—à–∏ –ª–æ–≥–∏"
async def show_user_logs(message: Message, bot: Bot) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∞—à–∏ –ª–æ–≥–∏'"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        log_repo = LogRepository(session)
        session_repo = SessionRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logs = await log_repo.get_user_logs(message.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sessions = await session_repo.get_user_sessions(message.from_user.id)
        
        if not logs and not sessions:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–æ–≤ –∏–ª–∏ —Å–µ—Å—Å–∏–π.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–æ–≥–∞—Ö
        if logs:
            await message.answer(f"üì¶ –£ –≤–∞—Å –µ—Å—Ç—å {len(logs)} –ª–æ–≥–æ–≤:")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for log in logs:
                try:
                    await bot.send_document(
                        chat_id=message.chat.id,
                        document=log.file_id,
                        caption=f"–õ–æ–≥: {log.file_name}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ {log.id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Å—Å–∏—è—Ö
        if sessions:
            await message.answer(f"üì± –£ –≤–∞—Å –µ—Å—Ç—å {len(sessions)} —Å–µ—Å—Å–∏–π:")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ 10 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            sessions_chunks = [sessions[i:i+10] for i in range(0, len(sessions), 10)]
            
            for chunk in sessions_chunks:
                sessions_info = "\n".join([f"- {session.phone_number}" for session in chunk])
                await message.answer(sessions_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
async def show_statistics_inline(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        user_repo = UserRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await user_repo.get_fresh_statistics(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        stats_message += f"–í—Å–µ–≥–æ –≤—ã –≤–∑—è–ª–∏: {stats['taken_logs_count']} —Å–µ—Å—Å–∏–π.\n"
        stats_message += f"–í—Å–µ–≥–æ –ø—É—Å—Ç—ã—Ö –ª–æ–≥–æ–≤: {stats['empty_logs_count']}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await callback.message.answer(stats_message, parse_mode="Markdown")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer()
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: taken={stats['taken_logs_count']}, empty={stats['empty_logs_count']}")

def register_worker_handlers(dp: Dispatcher, bot: Bot) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(show_statistics_inline, F.data == "worker_statistics")
    dp.message.register(show_statistics, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    dp.callback_query.register(lambda callback, state: empty_log(callback.message, state), F.data == "worker_empty_log")
    dp.message.register(lambda message, state: empty_log(message, state), F.text == "üóëÔ∏è –ü—É—Å—Ç–æ–π –ª–æ–≥")
    
    dp.callback_query.register(lambda callback, state: take_logs(callback.message, state), F.data == "worker_take_logs")
    dp.message.register(lambda message, state: take_logs(message, state), F.text == "üì• –í–∑—è—Ç—å –ª–æ–≥–∏")
    
    dp.callback_query.register(lambda callback: show_user_logs(callback.message, bot), F.data == "worker_your_logs")
    dp.message.register(lambda message: show_user_logs(message, bot), F.text == "üìã –í–∞—à–∏ –ª–æ–≥–∏")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_empty_logs_count, WorkerState.waiting_for_empty_logs_count)
    dp.message.register(process_logs_count, WorkerState.waiting_for_logs_count) 